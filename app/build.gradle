/*
 * Copyright (c) 2018 ThanksMister LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

def versionMajor = 0
def versionMinor = 8
def versionPatch = 2
def versionBuild = 6 // bump for dog food builds, public betas, etc.

def ALARM_CODE() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("alarmCode");
}

def TELEGRAM_TOKEN() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("telegramToken");
}

def TELEGRAM_CHAT_ID() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("telegramChatId");
}

def DARK_SKY_KEY() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("darkSkyKey");
}

def MAIL_GUN_KEY() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("mailGunApiKey");
}

def MAIL_GUN_URL() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("mailGunUr");
}

def IMGUR_CLIENT_ID() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("clientId");
}

def LATITUDE() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("lat");
}

def LONGITUDE() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("lon");
}

def MAIL_FROM() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("mailFrom");
}

def MAIL_TO() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("mailTo");
}

def HASS_URL() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("hassUrl");
}

def BROKER() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("broker");
}

def IMGUR_TAG() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty("tag");
}

android {
    kapt {
        generateStubs = true
        correctErrorTypes = true
    }
    compileSdkVersion 27
    buildToolsVersion "27.0.3"
    defaultConfig {
        applicationId "com.thanksmister.iot.mqtt.alarmpanel"
        minSdkVersion versions.min_sdk
        targetSdkVersion versions.target_sdk
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        renderscriptTargetApi 16
        renderscriptSupportModeEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "default"
    productFlavors {
        def BASE_ENVIRONMENT = "BASE_ENVIRONMENT"
        dev {
            dimension "default"
            buildConfigField "String", BASE_ENVIRONMENT, '"DEV_ENVIRONMENT"'
            applicationId "com.thanksmister.iot.mqtt.alarmpanel"
            versionName "${versionMajor}.${versionMinor}.${versionPatch} Build ${versionBuild}-DEV"
            buildConfigField 'Integer', 'ALARM_CODE', ALARM_CODE()
            buildConfigField 'String', 'DARK_SKY_KEY', "\"" + DARK_SKY_KEY() +"\""
            buildConfigField 'String', 'MAIL_GUN_KEY', "\"" + MAIL_GUN_KEY() +"\""
            buildConfigField 'String', 'MAIL_GUN_URL', "\"" + MAIL_GUN_URL() +"\""
            buildConfigField 'String', 'IMGUR_CLIENT_ID', "\"" + IMGUR_CLIENT_ID() +"\""
            buildConfigField 'String', 'LATITUDE', "\"" + LATITUDE() +"\""
            buildConfigField 'String', 'LONGITUDE', "\"" + LONGITUDE() +"\""
            buildConfigField 'String', 'MAIL_FROM', "\"" + MAIL_FROM() +"\""
            buildConfigField 'String', 'MAIL_TO', "\"" + MAIL_TO() +"\""
            buildConfigField 'String', 'HASS_URL', "\"" + HASS_URL() +"\""
            buildConfigField 'String', 'BROKER', "\"" + BROKER() +"\""
            buildConfigField 'String', 'IMGUR_TAG', "\"" + IMGUR_TAG() +"\""
            buildConfigField 'String', 'TELEGRAM_TOKEN', "\"" + TELEGRAM_TOKEN() +"\""
            buildConfigField 'String', 'TELEGRAM_CHAT_ID', "\"" + TELEGRAM_CHAT_ID() +"\""
        }
        qa {
            dimension "default"
            buildConfigField "String", BASE_ENVIRONMENT, '"QA_ENVIRONMENT"'
            applicationId "com.thanksmister.iot.mqtt.alarmpanel"
            versionName "${versionMajor}.${versionMinor}.${versionPatch} Build ${versionBuild}-QA"
        }
        prod {
            dimension "default"
            buildConfigField "String", BASE_ENVIRONMENT, '"PROD_ENVIRONMENT"'
            applicationId "com.thanksmister.iot.mqtt.alarmpanel"
            versionName "${versionMajor}.${versionMinor}.${versionPatch} Build ${versionBuild}"
            buildConfigField 'Integer', 'ALARM_CODE', '1234'
            buildConfigField 'String', 'DARK_SKY_KEY', '""'
            buildConfigField 'String', 'MAIL_GUN_KEY', '""'
            buildConfigField 'String', 'MAIL_GUN_URL','""'
            buildConfigField 'String', 'IMGUR_CLIENT_ID', '""'
            buildConfigField 'String', 'LATITUDE', '""'
            buildConfigField 'String', 'LONGITUDE', '""'
            buildConfigField 'String', 'MAIL_FROM', '""'
            buildConfigField 'String', 'MAIL_TO', '""'
            buildConfigField 'String', 'HASS_URL', '""'
            buildConfigField 'String', 'BROKER', '""'
            buildConfigField 'String', 'IMGUR_TAG', '""'
            buildConfigField 'String', 'TELEGRAM_TOKEN', '""'
            buildConfigField 'String', 'TELEGRAM_CHAT_ID', '""'
        }
    }
}

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"

    implementation "com.android.support.constraint:constraint-layout:$versions.constraint_layout"
    implementation "com.android.support:recyclerview-v7:$versions.support"
    implementation "com.android.support:gridlayout-v7:$versions.support"
    implementation "com.android.support:appcompat-v7:$versions.support"
    implementation "com.android.support:design:$versions.support"
    implementation "com.android.support:support-v13:$versions.support"
    implementation "com.android.support:preference-v14:$versions.support"
    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
    implementation "com.android.support:support-vector-drawable:$versions.support"
    implementation 'com.google.android.gms:play-services-vision:15.0.2'
    implementation 'com.android.support:multidex:1.0.3'

    // Navigation
    implementation "android.arch.navigation:navigation-fragment:$versions.navigation"
    implementation "android.arch.navigation:navigation-ui:$versions.navigation"

    // RxJava
    implementation 'io.reactivex.rxjava2:rxjava:2.1.7'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // LiveData + ViewModel
    implementation "android.arch.lifecycle:extensions:$versions.archVersion"
    annotationProcessor "android.arch.lifecycle:compiler:$versions.archVersion"
    implementation "android.arch.lifecycle:reactivestreams:$versions.archVersion"

    // Room
    implementation "android.arch.persistence.room:runtime:$versions.archRoomVersion"
    kapt "android.arch.persistence.room:compiler:$versions.archRoomVersion"
    implementation "android.arch.persistence.room:rxjava2:$versions.archRoomVersion"

    // MQTT
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.0'
    implementation 'org.eclipse.paho:org.eclipse.paho.android.service:1.1.1'

    // Image
    implementation 'com.squareup.picasso:picasso:2.5.2'

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:$versions.retrofit"
    implementation "com.squareup.retrofit2:converter-gson:$versions.retrofit"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit"

    // OKHttp
    implementation 'com.squareup.okhttp3:logging-interceptor:3.4.1'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'

    // Dagger
    implementation "com.google.dagger:dagger:$versions.dagger"
    annotationProcessor "com.google.dagger:dagger-compiler:$versions.dagger"
    implementation "com.google.dagger:dagger-android-support:$versions.dagger"
    kapt "com.google.dagger:dagger-compiler:$versions.dagger"
    implementation "com.google.dagger:dagger-android:$versions.dagger"
    annotationProcessor "com.google.dagger:dagger-android-processor:$versions.dagger"
    kapt "com.google.dagger:dagger-android-processor:$versions.dagger"

    // Logging
    implementation 'com.jakewharton.timber:timber:4.5.1'

    // Stetho
    implementation "com.facebook.stetho:stetho:$versions.stetho"
    implementation "com.facebook.stetho:stetho-okhttp3:$versions.stetho"
    implementation "com.facebook.stetho:stetho-urlconnection:$versions.stetho"

    // Fingerprint Identify
    implementation 'com.wei.android.lib:fingerprintidentify:1.2.1'

    // 3rd party
    implementation 'io.github.silvaren:easyrs:0.5.3'
    implementation 'com.koushikdutta.async:androidasync:2.1.9'

    implementation 'joda-time:joda-time:2.9.9'

    implementation('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
}